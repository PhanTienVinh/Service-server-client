// Generated by gencpp from file letsgoo/string_lengthRequest.msg
// DO NOT EDIT!


#ifndef LETSGOO_MESSAGE_STRING_LENGTHREQUEST_H
#define LETSGOO_MESSAGE_STRING_LENGTHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace letsgoo
{
template <class ContainerAllocator>
struct string_lengthRequest_
{
  typedef string_lengthRequest_<ContainerAllocator> Type;

  string_lengthRequest_()
    : chuoi()  {
    }
  string_lengthRequest_(const ContainerAllocator& _alloc)
    : chuoi(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _chuoi_type;
  _chuoi_type chuoi;





  typedef boost::shared_ptr< ::letsgoo::string_lengthRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::letsgoo::string_lengthRequest_<ContainerAllocator> const> ConstPtr;

}; // struct string_lengthRequest_

typedef ::letsgoo::string_lengthRequest_<std::allocator<void> > string_lengthRequest;

typedef boost::shared_ptr< ::letsgoo::string_lengthRequest > string_lengthRequestPtr;
typedef boost::shared_ptr< ::letsgoo::string_lengthRequest const> string_lengthRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::letsgoo::string_lengthRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::letsgoo::string_lengthRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::letsgoo::string_lengthRequest_<ContainerAllocator1> & lhs, const ::letsgoo::string_lengthRequest_<ContainerAllocator2> & rhs)
{
  return lhs.chuoi == rhs.chuoi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::letsgoo::string_lengthRequest_<ContainerAllocator1> & lhs, const ::letsgoo::string_lengthRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace letsgoo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::letsgoo::string_lengthRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::letsgoo::string_lengthRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::letsgoo::string_lengthRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::letsgoo::string_lengthRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::letsgoo::string_lengthRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::letsgoo::string_lengthRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::letsgoo::string_lengthRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbe62d19da0c1d56ccd80c3bbb57c844";
  }

  static const char* value(const ::letsgoo::string_lengthRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbe62d19da0c1d56ULL;
  static const uint64_t static_value2 = 0xccd80c3bbb57c844ULL;
};

template<class ContainerAllocator>
struct DataType< ::letsgoo::string_lengthRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "letsgoo/string_lengthRequest";
  }

  static const char* value(const ::letsgoo::string_lengthRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::letsgoo::string_lengthRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string chuoi\n"
;
  }

  static const char* value(const ::letsgoo::string_lengthRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::letsgoo::string_lengthRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.chuoi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct string_lengthRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::letsgoo::string_lengthRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::letsgoo::string_lengthRequest_<ContainerAllocator>& v)
  {
    s << indent << "chuoi: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.chuoi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LETSGOO_MESSAGE_STRING_LENGTHREQUEST_H
